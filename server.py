import os
import sys
import json
import urllib.request

# Caminho correto do projeto
sys.path.insert(0, os.path.dirname(__file__))

# Chave da OpenAI (direto no c√≥digo por enquanto)
OPENAI_API_KEY = 'coloque sua chave aqui'

# System Prompt completo do Tribo Flutoo
system_prompt = """
Voc√™ √© o 'Tribo Flutoo', o assistente oficial de vendas e atendimento da marca Flutooando Por A√≠.

Sua miss√£o √© atender clientes de forma simp√°tica, acolhedora, divertida e objetiva, sempre passando a sensa√ß√£o de liberdade, aventura, leveza e conex√£o com a natureza, que s√£o os valores centrais da marca.

Voc√™ sempre fala com um tom descontra√≠do, pr√≥ximo, alegre, como um amigo que entende de aventuras ao ar livre. 
Suas respostas s√£o curtas, diretas, sem enrolar, mas cheias de simpatia e positividade.

Sobre a marca:
A Flutooando Por A√≠ √© uma marca de produtos para lazer ao ar livre e momentos de divers√£o com a fam√≠lia e amigos. O produto principal √© o Flutoo, um acess√≥rio flutuante inovador, ideal para usar em praias, piscinas, rios e lagos. 
O Flutoo **n√£o precisa ser inflado**, pois √© feito com estrutura de macarr√µes flutuantes (espuma interna especial), o que o torna **super pr√°tico, leve e pronto para usar a qualquer momento**. 
√â confort√°vel, f√°cil de transportar e perfeito para quem gosta de relaxar ou se divertir na √°gua com seguran√ßa, sem complica√ß√£o!

Nosso p√∫blico √© aventureiro, livre, busca experi√™ncias novas, ama a natureza e quer produtos que facilitem o lazer sem burocracia.

O que o Tribo Flutoo faz:
- Responde d√∫vidas sobre o Flutoo (o que √©, como usar, pre√ßo, como comprar, frete).
- Explica que o Flutoo **n√£o precisa de ar ou inflar**, basta colocar na √°gua e aproveitar.
- D√° dicas de como aproveitar o produto em viagens, passeios e aventuras.
- Fala sobre novidades da marca, lan√ßamentos e promo√ß√µes.
- Encaminha para o atendimento humano em caso de d√∫vidas espec√≠ficas ou problemas com pedidos.
- Sempre se despede com simpatia, convidando a pessoa para seguir a marca nas redes sociais e acompanhar as novidades.

Exemplos de tom e estilo nas respostas:
- "Oie! Tudo bem? Que bom falar com voc√™! üåä O Flutoo √© perfeito pra quem ama curtir a vida ao ar livre! Quer saber mais?"
- "Sim, o Flutoo suporta adultos e crian√ßas, e o melhor: **n√£o precisa encher de ar!** √â s√≥ colocar na √°gua e curtir! üöÄ"
- "Legal voc√™ perguntar! Nosso frete √© r√°pido e enviamos pra todo o Brasil. Quer saber o valor exato pro seu CEP? S√≥ me passar! üì¶"
- "Oba! Vou te passar o link pra comprar o seu Flutoo e j√° garantir divers√£o! üòâ"

Importante:
- Nunca fale de flautas, m√∫sica ou qualquer produto fora do universo da marca Flutooando Por A√≠.
- Sempre que poss√≠vel, estimule a conversa com o cliente, usando perguntas curtas pra manter o di√°logo (ex.: "Quer ver fotos do Flutoo em a√ß√£o?").
- N√£o invente informa√ß√µes sobre o produto. Se n√£o souber algo, diga que vai chamar o atendimento humano pra ajudar.
- Sempre enfatize que o Flutoo **n√£o precisa de inflar**, √© pr√°tico, leve e pronto pra usar.
- Seja leve e divertido, mas sem deixar de ser profissional e respeitoso.

Se entendeu, aguarde a mensagem do cliente e responda seguindo esse tom!
"""


# Fun√ß√£o para conversar com o GPT-4
def conversar_com_gpt(mensagem_usuario):
    url = "https://api.openai.com/v1/chat/completions"

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {OPENAI_API_KEY}"
    }

    data = {
        "model": "gpt-4",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": mensagem_usuario}
        ],
        "temperature": 0.7
    }

    req = urllib.request.Request(url, data=json.dumps(data).encode(), headers=headers)

    try:
        with urllib.request.urlopen(req, timeout=10) as response:
            result = json.loads(response.read().decode())
            resposta = result['choices'][0]['message']['content'].strip()
            return resposta
    except Exception as e:
        print(f"Erro ao se comunicar com o GPT-4: {e}")
        return "Desculpe, n√£o consegui processar sua mensagem agora. Tente novamente mais tarde."

# Fun√ß√£o principal WSGI
def application(environ, start_response):
    try:
        method = environ['REQUEST_METHOD']
        headers = [('Content-Type', 'application/json; charset=utf-8')]

        if method == 'POST':
            try:
                request_body_size = int(environ.get('CONTENT_LENGTH', 0))
            except (ValueError):
                request_body_size = 0

            request_body = environ['wsgi.input'].read(request_body_size)
            data = json.loads(request_body)
            print("Webhook recebido:", json.dumps(data, indent=4, ensure_ascii=False))

            # Extrair dados do ManyChat
            mensagem_recebida = data.get('content', {}).get('text', 'Sem mensagem')
            cliente_id = data.get('from', {}).get('id', 'ID n√£o encontrado')

            print(f"Mensagem recebida de {cliente_id}: {mensagem_recebida}")

            # Chamar o GPT-4
            resposta_gpt = conversar_com_gpt(mensagem_recebida)

            # Preparar a resposta
            response_body = {
                'status': 'ok',
                'mensagem_recebida': mensagem_recebida,
                'cliente_id': cliente_id,
                'resposta_agente': resposta_gpt
            }
            response_data = json.dumps(response_body, ensure_ascii=False).encode('utf-8')
            start_response('200 OK', headers)
            return [response_data]

        elif method == 'GET':
            response_body = {'status': 'ok', 'mensagem': 'API Tribo Flutoo funcionando com webhook ManyChat!'}
            response_data = json.dumps(response_body, ensure_ascii=False).encode('utf-8')
            start_response('200 OK', headers)
            return [response_data]

        else:
            response_body = {'error': 'M√©todo n√£o suportado.'}
            response_data = json.dumps(response_body, ensure_ascii=False).encode('utf-8')
            start_response('405 Method Not Allowed', headers)
            return [response_data]

    except Exception as e:
        print(f"Erro no servidor: {e}")
        response_body = {'error': 'Erro interno no servidor.', 'details': str(e)}
        response_data = json.dumps(response_body, ensure_ascii=False).encode('utf-8')
        start_response('500 Internal Server Error', [('Content-Type', 'application/json; charset=utf-8')])
        return [response_data]
